{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["## Setup\n","\"\"\"\n","This section sets up the environment by installing necessary libraries\n","and importing them for use in the notebook.\n","\"\"\"\n","\n","!pip install rdkit pandas scikit-learn numpy\n","!pip install -U transformers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fj_TRdgUvarT","executionInfo":{"status":"ok","timestamp":1751033124221,"user_tz":240,"elapsed":26625,"user":{"displayName":"hao shen","userId":"05252071590435573274"}},"outputId":"7c05374a-205b-42bc-962c-3d067e366c9d"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: rdkit in /usr/local/lib/python3.11/dist-packages (2025.3.3)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (from rdkit) (11.2.1)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.3)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.5.1)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.53.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.33.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n","Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n","Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (2025.3.2)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (4.14.0)\n","Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (1.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.6.15)\n"]}]},{"cell_type":"code","source":["# mount gdrive data\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"ujpCVF6L1R8L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1751033124851,"user_tz":240,"elapsed":621,"user":{"displayName":"hao shen","userId":"05252071590435573274"}},"outputId":"0cda62eb-1d60-4cfa-c916-c09d953e35c4"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["# Load Data From File\n","\n","import pandas as pd\n","df = pd.read_csv('/content/drive/My Drive/broad_hackathon/data/ache_bche_train.csv')\n","\n","# or Create fake data\n","# data = {\n","#     'SMILES': [\n","#         'CCO', 'CCCC', 'C1=CC=CN=C1', 'CC(=O)OC1=CC=CC=C1C(=O)O', 'C(=O)(O)C(=O)O'\n","#     ],\n","#     'value': [10.5, 15.2, 8.1, 25.7, 12.9],\n","#     'metadata1': [1, 0, 1, 0, 1],\n","#     'metadata2': ['A', 'B', 'A', 'C', 'B']\n","# }\n","# df = pd.DataFrame(data)\n","\n","print(len(df), \"rows\")\n","print(df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O5AuPHMo1DiZ","executionInfo":{"status":"ok","timestamp":1751035695267,"user_tz":240,"elapsed":50,"user":{"displayName":"hao shen","userId":"05252071590435573274"}},"outputId":"9dbb2daa-52ae-4630-cc9a-aa39aa4c0034"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["1210 rows\n","   Unnamed: 0  action_type activity_comment  activity_id activity_properties  \\\n","0           0          NaN              NaN        72529                  []   \n","1           1          NaN              NaN        94483                  []   \n","2           2          NaN              NaN        98618                  []   \n","3           3          NaN              NaN       268152                  []   \n","4           4          NaN              NaN       277092                  []   \n","\n","  assay_chembl_id                          assay_description assay_type  \\\n","0    CHEMBL844948            Ratio of IC50 for BuChE to AChE          B   \n","1    CHEMBL844948            Ratio of IC50 for BuChE to AChE          B   \n","2    CHEMBL844948            Ratio of IC50 for BuChE to AChE          B   \n","3    CHEMBL844184  IC50 (hBuChE/hAChE) ratio of the compound          B   \n","4    CHEMBL844184  IC50 (hBuChE/hAChE) ratio of the compound          B   \n","\n","   assay_variant_accession  assay_variant_mutation  ...  \\\n","0                      NaN                     NaN  ...   \n","1                      NaN                     NaN  ...   \n","2                      NaN                     NaN  ...   \n","3                      NaN                     NaN  ...   \n","4                      NaN                     NaN  ...   \n","\n","               target_pref_name target_tax_id text_value toid        type  \\\n","0  Cholinesterases; ACHE & BCHE          9606        NaN  NaN       Ratio   \n","1  Cholinesterases; ACHE & BCHE          9606        NaN  NaN       Ratio   \n","2  Cholinesterases; ACHE & BCHE          9606        NaN  NaN       Ratio   \n","3  Cholinesterases; ACHE & BCHE          9606        NaN  NaN  IC50 ratio   \n","4  Cholinesterases; ACHE & BCHE          9606        NaN  NaN  IC50 ratio   \n","\n","  units uo_units upper_value   value        fingerprint  \n","0   NaN      NaN         NaN  1252.0  [0 0 0 ... 0 0 0]  \n","1   NaN      NaN         NaN     0.9  [0 0 0 ... 0 0 0]  \n","2   NaN      NaN         NaN    11.9  [0 0 0 ... 0 0 0]  \n","3   NaN      NaN         NaN     2.2  [0 0 0 ... 0 0 0]  \n","4   NaN      NaN         NaN     4.2  [0 0 0 ... 0 0 0]  \n","\n","[5 rows x 48 columns]\n"]}]},{"cell_type":"code","source":["df.document_chembl_id"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"id":"JpMwENerEAp1","executionInfo":{"status":"ok","timestamp":1751039107752,"user_tz":240,"elapsed":42,"user":{"displayName":"hao shen","userId":"05252071590435573274"}},"outputId":"7f179ac7-0994-4f11-b2a8-0e8eec3b3a83"},"execution_count":151,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       CHEMBL1128203\n","1       CHEMBL1128203\n","2       CHEMBL1128203\n","3       CHEMBL1134774\n","4       CHEMBL1134774\n","            ...      \n","1204    CHEMBL5352458\n","1205    CHEMBL5352458\n","1206    CHEMBL5352458\n","1207    CHEMBL5352458\n","1208    CHEMBL5352458\n","Name: document_chembl_id, Length: 955, dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>document_chembl_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CHEMBL1128203</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL1128203</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CHEMBL1128203</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL1134774</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL1134774</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1204</th>\n","      <td>CHEMBL5352458</td>\n","    </tr>\n","    <tr>\n","      <th>1205</th>\n","      <td>CHEMBL5352458</td>\n","    </tr>\n","    <tr>\n","      <th>1206</th>\n","      <td>CHEMBL5352458</td>\n","    </tr>\n","    <tr>\n","      <th>1207</th>\n","      <td>CHEMBL5352458</td>\n","    </tr>\n","    <tr>\n","      <th>1208</th>\n","      <td>CHEMBL5352458</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>955 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":151}]},{"cell_type":"code","source":["def partition_salts(smiles):\n","  chunks = smiles.split(\".\")\n","  lengths = [len(c) for c in chunks]\n","\n","  # get index of max length and get the associated chunk\n","  max_len = max(lengths)\n","  max_index = lengths.index(max_len)\n","  main_smiles = chunks[max_index]\n","  salts = \".\".join([c for c,l in zip(chunks, lengths) if l != max_len])\n","  return main_smiles, salts\n","\n","def smiles_description_preprocess(row):\n","  # process the smiles information\n","  smiles = row['canonical_smiles']\n","  cleaned_smiles, salts = partition_salts(smiles)\n","\n","  descriptions = [\n","      f\"the measurement is in a {row['bao_label']}\",\n","      f\"the true value is {row['relation']} compared to the measured value\",\n","  ]\n","  if len(salts) > 0:\n","    descriptions.append(f\"the salts for this measurement are {salts}.\")\n","  descriptions.append(row[\"assay_description\"])\n","\n","  return cleaned_smiles, \". \".join(descriptions)\n","\n","\n","def preprocess(df, smiles_col, y_col):\n","  # drop nas\n","  df = df.dropna(subset=[smiles_col, y_col])\n","\n","  # keep only the first entry of each unique canonical_smiles\n","  df = df.drop_duplicates(subset=[smiles_col], keep=\"first\")\n","\n","\n","  # Create a list to store descriptions\n","  descriptions = []\n","  smiles = []\n","\n","  for i, r in df.iterrows():\n","      cleaned_smiles, description = smiles_description_preprocess(r)\n","      descriptions.append(description)\n","      smiles.append(cleaned_smiles)\n","\n","  # Replace the original SMILES column with the cleaned SMILES\n","  df[smiles_col] = smiles\n","\n","  # Add descriptions to dataframe (assuming description object has attributes you want to add)\n","  df['description'] = descriptions\n","\n","  return df\n"],"metadata":{"id":"BToICp3F2PuR","executionInfo":{"status":"ok","timestamp":1751037281460,"user_tz":240,"elapsed":166,"user":{"displayName":"hao shen","userId":"05252071590435573274"}}},"execution_count":116,"outputs":[]},{"cell_type":"code","source":["# Featurization\n","from rdkit import Chem\n","from rdkit.Chem import AllChem\n","from rdkit.Chem import rdFingerprintGenerator\n","import numpy as np\n","\n","## Generate Molecular Features\n","\"\"\"\n","This section focuses on converting the SMILES strings into numerical feature vectors.\n","We will use RDKit to generate Morgan Fingerprints.\n","\"\"\"\n","\n","mfpgen = rdFingerprintGenerator.GetMorganGenerator(radius=2,fpSize=2048)\n","\n","\n","smiles_col = \"canonical_smiles\"\n","y_col = \"value\"\n","\n","df = preprocess(df, smiles_col, y_col)\n","\n","# Apply featurization to the SMILES column\n","df['fingerprint'] = df[smiles_col].apply(lambda x: np.array(mfpgen.GetFingerprint(Chem.MolFromSmiles(x)), dtype=np.uint8))\n","\n","y = df[y_col].values\n","y = np.log(y)\n"],"metadata":{"id":"K4A-b-2TwKQq","executionInfo":{"status":"ok","timestamp":1751037292480,"user_tz":240,"elapsed":5473,"user":{"displayName":"hao shen","userId":"05252071590435573274"}}},"execution_count":117,"outputs":[]},{"cell_type":"code","source":["for c in df.columns:\n","  distinct = len(df[c].value_counts())\n","  if 1 < distinct < 500:\n","    print(c, distinct)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wwiELZ4EIFAp","executionInfo":{"status":"ok","timestamp":1751033215227,"user_tz":240,"elapsed":9422,"user":{"displayName":"hao shen","userId":"05252071590435573274"}},"outputId":"11db69c9-ca7e-480f-b608-f908df41da8d"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["assay_chembl_id 104\n","assay_description 88\n","bao_endpoint 3\n","bao_format 3\n","bao_label 3\n","document_chembl_id 84\n","document_journal 7\n","document_year 28\n","molecule_pref_name 35\n","relation 3\n","standard_relation 3\n","standard_type 9\n","type 9\n"]}]},{"cell_type":"code","source":["from sentence_transformers import SentenceTransformer\n","transformer = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')"],"metadata":{"id":"-ofv4g4trJzy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# prompt: write a minimal test example of running a piece of text through the model\n","\n","import torch\n","from transformers import AutoTokenizer\n","\n","from transformers import AutoModel\n","\n","def encode_text(text):\n","\n","  transformer = AutoModel.from_pretrained(\"allenai/scibert_scivocab_uncased\")\n","  tokenizer = AutoTokenizer.from_pretrained(\"allenai/scibert_scivocab_uncased\")\n","  inputs = tokenizer(text, return_tensors=\"pt\", padding=True)\n","\n","  # Run the input through the model\n","  with torch.no_grad():\n","      outputs = transformer(**inputs)\n","\n","  # The output is typically a tuple, where the first element contains the hidden states\n","  last_hidden_states = outputs.last_hidden_state\n","\n","  # You can further process last_hidden_states, for example, take the representation\n","  # of the [CLS] token for classification tasks:\n","  cls_representation = last_hidden_states[:, 0, :]\n","  return cls_representation\n"],"metadata":{"id":"u4tF0lAvtRnN","executionInfo":{"status":"ok","timestamp":1751033385238,"user_tz":240,"elapsed":11,"user":{"displayName":"hao shen","userId":"05252071590435573274"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["def compute_description_embeddings(df):\n","  descriptions = df.description.unique()\n","  # assay_embeddings = transformer.encode(description)\n","  prepend_text = \"Determine if the description describes BuChe over AChe or AChe over BuChe.\"\n","  description_embeddings = encode_text([prepend_text+d for d in descriptions.tolist()])\n","  # remap embeddings back to where they came from\n","  df['description_embedding'] = df.description.apply(lambda x: description_embeddings[np.where(descriptions == x)[0][0]])\n","  return df\n","\n","df = compute_description_embeddings(df)\n"],"metadata":{"id":"VRU-SsbDM1hQ","executionInfo":{"status":"ok","timestamp":1751037757702,"user_tz":240,"elapsed":10,"user":{"displayName":"hao shen","userId":"05252071590435573274"}}},"execution_count":128,"outputs":[]},{"cell_type":"code","source":["assay_embeddings.shape\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.decomposition import PCA\n","from sklearn.preprocessing import StandardScaler\n","\n","def visualize_embeddings_pca(embeddings, n_components=2, sample_size=None,\n","                           figsize=(10, 8), alpha=0.6, s=20):\n","    \"\"\"\n","    Visualize high-dimensional embeddings using PCA dimensionality reduction.\n","\n","    Args:\n","        embeddings: numpy array of shape (n_samples, n_features)\n","        n_components: number of PCA components (2 for 2D plot, 3 for 3D)\n","        sample_size: if provided, randomly sample this many points for faster visualization\n","        figsize: figure size tuple\n","        alpha: point transparency\n","        s: point size\n","    \"\"\"\n","\n","    # Sample data if requested for performance\n","    if sample_size and sample_size < len(embeddings):\n","        idx = np.random.choice(len(embeddings), sample_size, replace=False)\n","        data = embeddings[idx]\n","        print(f\"Sampled {sample_size} points from {len(embeddings)} total\")\n","    else:\n","        data = embeddings\n","        print(f\"Using all {len(embeddings)} points\")\n","\n","    # Standardize the features (recommended for PCA)\n","    scaler = StandardScaler()\n","    data_scaled = scaler.fit_transform(data)\n","\n","    # Apply PCA\n","    pca = PCA(n_components=n_components)\n","    data_pca = pca.fit_transform(data_scaled)\n","\n","    # Print explained variance\n","    explained_var = pca.explained_variance_ratio_\n","    print(f\"Explained variance ratio: {explained_var}\")\n","    print(f\"Total explained variance: {explained_var.sum():.3f}\")\n","\n","    # Create visualization\n","    if n_components == 2:\n","        plt.figure(figsize=figsize)\n","        plt.scatter(data_pca[:, 0], data_pca[:, 1], alpha=alpha, s=s)\n","        plt.xlabel(f'PC1 ({explained_var[0]:.3f} variance)')\n","        plt.ylabel(f'PC2 ({explained_var[1]:.3f} variance)')\n","        plt.title(f'PCA Visualization of Embeddings\\n({data.shape[0]} points, {data.shape[1]} dimensions)')\n","        plt.grid(True, alpha=0.3)\n","\n","    elif n_components == 3:\n","        fig = plt.figure(figsize=figsize)\n","        ax = fig.add_subplot(111, projection='3d')\n","        ax.scatter(data_pca[:, 0], data_pca[:, 1], data_pca[:, 2], alpha=alpha, s=s)\n","        ax.set_xlabel(f'PC1 ({explained_var[0]:.3f})')\n","        ax.set_ylabel(f'PC2 ({explained_var[1]:.3f})')\n","        ax.set_zlabel(f'PC3 ({explained_var[2]:.3f})')\n","        ax.set_title(f'3D PCA Visualization\\n({data.shape[0]} points)')\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","    return pca, data_pca\n","\n","pca = visualize_embeddings_pca(description_embeddings, n_components=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":861},"id":"oOPb2yXbRYtL","executionInfo":{"status":"ok","timestamp":1751037574881,"user_tz":240,"elapsed":502,"user":{"displayName":"hao shen","userId":"05252071590435573274"}},"outputId":"ab917308-e5c2-4673-e317-a6d0de644f00"},"execution_count":125,"outputs":[{"output_type":"stream","name":"stdout","text":["Using all 103 points\n","Explained variance ratio: [0.17746711 0.17465768]\n","Total explained variance: 0.352\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# prompt: create a histogram of y values\n","\n","import matplotlib.pyplot as plt\n","\n","# Create a histogram of the y values\n","plt.figure(figsize=(10, 6))\n","plt.hist(y, bins=50, edgecolor='black')\n","plt.title('Distribution of y values')\n","plt.xlabel('Value')\n","plt.ylabel('Frequency')\n","plt.grid(axis='y', alpha=0.75)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"qMpoQxwVAXvw","executionInfo":{"status":"ok","timestamp":1751037421963,"user_tz":240,"elapsed":220,"user":{"displayName":"hao shen","userId":"05252071590435573274"}},"outputId":"dcbe6371-cf90-415f-8f0b-7c25957a2054"},"execution_count":121,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def get_features(df):\n","    # Convert fingerprints to a numpy array\n","    fingerprints = np.vstack(df['fingerprint'].values)\n","    descriptions = np.vstack(df.description_embedding.values)\n","    return np.hstack([fingerprints, descriptions])\n","    # return fingerprints"],"metadata":{"id":"fFDRSbgP_vCU","executionInfo":{"status":"ok","timestamp":1751038430916,"user_tz":240,"elapsed":8,"user":{"displayName":"hao shen","userId":"05252071590435573274"}}},"execution_count":144,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import KFold\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import mean_squared_error, r2_score\n","from sklearn.preprocessing import StandardScaler\n","\n","# Training\n","\n","## Cross Validation\n","\"\"\"\n","This section performs model training using K-Fold cross-validation.\n","We will use a Random Forest Regressor model and report evaluation metrics.\n","\"\"\"\n","\n","# Define parameters for cross-validation\n","n_splits = 3  # Number of folds\n","random_state = 42 # Seed for reproducibility\n","\n","# Initialize KFold\n","kf = KFold(n_splits=n_splits, shuffle=True, random_state=random_state)\n","\n","# Initialize lists to store metrics\n","rmse_scores = []\n","r2_scores = []\n","\n","# Initialize the model\n","model = RandomForestRegressor(n_estimators=100, random_state=random_state)\n","\n","print(\"\\nStarting Cross-Validation...\")\n","\n","def run_cross_validation(model, X, y, n_splits=3, random_state=42):\n","\n","  # Perform cross-validation\n","  for fold, (train_index, test_index) in enumerate(kf.split(X)):\n","      print(f\"  Fold {fold+1}/{n_splits}\")\n","\n","      X_train, X_test = X[train_index], X[test_index]\n","      y_train, y_test = y[train_index], y[test_index]\n","\n","      # Train the model\n","      model.fit(X_train, y_train)\n","\n","      # Make predictions\n","      y_pred = model.predict(X_test)\n","\n","      # Evaluate the model\n","      rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n","      r2 = r2_score(y_test, y_pred)\n","\n","      # Store metrics\n","      rmse_scores.append(rmse)\n","      r2_scores.append(r2)\n","\n","      print(f\"    Fold {fold+1} - RMSE: {rmse:.4f}, R2: {r2:.4f}\")\n","\n","  # Report average metrics\n","  print(\"\\nCross-Validation Results:\")\n","  print(f\"  Average RMSE: {np.mean(rmse_scores):.4f}\")\n","  print(f\"  Average R2:   {np.mean(r2_scores):.4f}\")\n","  print(\"Cross-Validation Complete.\")\n","\n","  model.fit(X, y)\n","  return model\n","\n","\n","# assay embedding features\n","features = get_features(df)\n","model = run_cross_validation(model, features, y, n_splits=n_splits, random_state=random_state)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4cJaMdtpyRGJ","executionInfo":{"status":"ok","timestamp":1751038542831,"user_tz":240,"elapsed":110979,"user":{"displayName":"hao shen","userId":"05252071590435573274"}},"outputId":"a0d72c82-63bc-486f-bcca-c46435b3dc0b"},"execution_count":145,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Starting Cross-Validation...\n","  Fold 1/3\n","    Fold 1 - RMSE: 2.1475, R2: 0.4981\n","  Fold 2/3\n","    Fold 2 - RMSE: 1.6202, R2: 0.6673\n","  Fold 3/3\n","    Fold 3 - RMSE: 1.7167, R2: 0.5444\n","\n","Cross-Validation Results:\n","  Average RMSE: 1.8281\n","  Average R2:   0.5699\n","Cross-Validation Complete.\n"]}]},{"cell_type":"code","source":["# Apply featurization to the SMILES column\n","test_df = pd.read_csv('/content/drive/My Drive/broad_hackathon/data/ache_bche_test.csv')\n","\n","test_df = preprocess(test_df, smiles_col, y_col)\n","test_df['fingerprint'] = test_df[smiles_col].apply(lambda x: np.array(mfpgen.GetFingerprint(Chem.MolFromSmiles(x)), dtype=np.uint8))\n","\n","# Convert fingerprints to a numpy array\n","Xtest_fingerprints = np.vstack(test_df['fingerprint'].values)\n","ytest = test_df[y_col].values\n","\n","ytest = np.log(ytest)\n","\n","# description embedding\n","test_df = compute_description_embeddings(test_df)\n","\n","features = get_features(test_df)\n","\n","\n","ytest_pred = model.predict(features)\n","rmse = np.sqrt(mean_squared_error(ytest, ytest_pred))\n","r2 = r2_score(ytest, ytest_pred)\n","print(f\"Test RMSE: {rmse:.4f}, Test R2: {r2:.4f}\")"],"metadata":{"id":"7sMR_4QzvZw1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1751038545217,"user_tz":240,"elapsed":2379,"user":{"displayName":"hao shen","userId":"05252071590435573274"}},"outputId":"22ba1af3-3110-4898-a723-bd32b0f41a44"},"execution_count":146,"outputs":[{"output_type":"stream","name":"stdout","text":["Test RMSE: 2.4403, Test R2: 0.0278\n"]}]},{"cell_type":"code","source":["ytest"],"metadata":{"id":"avpU2CJiCIwx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Baseline 10 estimators\n","  Fold 1/3\n","    Fold 1 - RMSE: 2.2332, R2: 0.4573\n","  Fold 2/3\n","    Fold 2 - RMSE: 1.8670, R2: 0.5582\n","  Fold 3/3\n","    Fold 3 - RMSE: 1.7697, R2: 0.5158\n","\n","  Average RMSE: 1.9566\n","  Average R2:   0.5104\n","Test RMSE: 2.9859, Test R2: -0.4555\n","\n","Baseline 50 estimators\n","  Fold 1/3\n","    Fold 1 - RMSE: 2.2130, R2: 0.4671\n","  Fold 2/3\n","    Fold 2 - RMSE: 1.7507, R2: 0.6115\n","  Fold 3/3\n","    Fold 3 - RMSE: 1.7389, R2: 0.5325\n","\n","  Average RMSE: 1.9009\n","  Average R2:   0.5370\n","Test RMSE: 3.0843, Test R2: -0.5531\n","\n","\n","\n","\n","SciBert RF 10 estimators. prepend text\n","  Fold 1/3\n","    Fold 1 - RMSE: 2.1041, R2: 0.5182\n","  Fold 2/3\n","    Fold 2 - RMSE: 1.6221, R2: 0.6665\n","  Fold 3/3\n","    Fold 3 - RMSE: 1.7650, R2: 0.5184\n","\n","  Average RMSE: 1.8304\n","  Average R2:   0.5677\n","Test RMSE: 2.6409, Test R2: -0.1387\n","\n","\n","\n","SciBert RF 50 estimators. prepend text\n","  Fold 1/3\n","    Fold 1 - RMSE: 2.1608, R2: 0.4919\n","  Fold 2/3\n","    Fold 2 - RMSE: 1.6391, R2: 0.6595\n","  Fold 3/3\n","    Fold 3 - RMSE: 1.7302, R2: 0.5372\n","  Average RMSE: 1.8433\n","  Average R2:   0.5629\n","Test RMSE: 2.4128, Test R2: 0.0495\n","\n","SciBert RF 100 estimators. prepend text\n","  Fold 1/3\n","    Fold 1 - RMSE: 2.1475, R2: 0.4981\n","  Fold 2/3\n","    Fold 2 - RMSE: 1.6202, R2: 0.6673\n","  Fold 3/3\n","    Fold 3 - RMSE: 1.7167, R2: 0.5444\n","\n","  Average RMSE: 1.8281\n","  Average R2:   0.5699\n","Test RMSE: 2.4403, Test R2: 0.0278\n","\n","\n"],"metadata":{"id":"ZDngGqiXHmE1"},"execution_count":null,"outputs":[]}]}